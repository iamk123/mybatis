<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itheima.dao.IUserDao">

    <!--解决实体类属性和数据库列明不对应的方式（另一种是创建实体类时就对应）-->
    <!--另一个作用是sql配置中resultType换成resultMap-->
    <!-- 配置 查询结果的列名和实体类的属性名的对应关系 -->
    <resultMap id="userMap" type="uSeR">
        <!-- 主键字段的对应 -->
        <id property="id" column="id"></id>
        <!--非主键字段的对应-->
        <result property="username" column="username"></result>
        <result property="address" column="address"></result>
        <result property="sex" column="sex"></result>
        <result property="birthday" column="birthday"></result>
        <!-- 配置user对象中accounts集合的映射 -->
        <collection property="accounts" ofType="account">
            <id column="aid" property="id"></id>
            <result column="uid" property="uid"></result>
            <result column="money" property="money"></result>
        </collection>
        <!--user到role的多对多-->
        <collection property="roles" ofType="role">
            <id property="roleId" column="id"></id>
            <result property="roleName" column="role_name"></result>
            <result property="roleDesc" column="role_desc"></result>
        </collection>
    </resultMap>


    <!--配置查询所有-->
    <select id="findAll" resultMap="userMap">
        select * from user;
    </select>

    <!--保存用户-->
    <insert id="saveUser" parameterType="com.itheima.domain.User">
        <!-- 配置保存时获取插入的id-->
        <selectKey keyColumn="userId" keyProperty="userId" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username, address, sex, birthday)
        values(#{userName}, #{userAddress}, #{userSex}, #{userBirthday});
    </insert>
    <!--全局配置中定义了typeAliases属性定义别名之后就不需要写全限定类名了-->
    <!--更新用户-->
    <update id="updateUser" parameterType="User">
        update user
        set username=#{userName}, address=#{userAddress}, sex=#{userSex}, birthday=#{userBirthday}
        where id=#{userId}
    </update>

    <!--根据id删除用户-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id = #{userId}
    </delete>

    <!--根据id查询用户-->
    <select id="findById" parameterType="INT" resultMap="userMap">
        select * from user where id = #{userId}
    </select>

    <!--根据名称模糊查询-->
    <select id="findByName" parameterType="string" resultMap="userMap">
        select * from user where username like #{name}
    </select>

    <select id="findTotal" resultType="int">
        select count(id) from user;
    </select>

    <!-- 根据queryVo的条件查询用户 -->
    <select id="findUserByVo" parameterType="com.itheima.domain.QueryVo" resultMap="userMap">
        select * from user where username like #{user.userName}
    </select>

    <!--根据条件查询-->
    <select id="findUserByCondition" resultMap="userMap" parameterType="user">
        select * from user
        <!--where的作用是省略where 1=1 -->
        <where>
            <if test="userName != null">
                and username = #{userName}
            </if>
            <if test="userSex != null">
                and sex = #{userSex}
            </if>
        </where>
    </select>

    <!--根据id集合查询用户-->
    <select id="findUserInIds" resultMap="userMap" parameterType="queryvo">
        <!--select * from user where id in (1, 2, 3, 4, 5);-->
        select * from user
        <where>
            <if test="ids != null and ids.size() > 0">
                <foreach collection="ids" open="id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>

    <!--user对account的一对多映射-->
    <select id="findUserAccountAll" resultMap="userMap">
        select * from user u left outer join account a on u.id = a.uid
    </select>

    <!--user对role的多对多映射-->
    <select id="findUserRoleAll" resultMap="userMap">
        select u.*, r.id as rid, r.role_name, r.role_desc
        from user u
        left outer join user_role ur on u.id = ur.uid
        left outer join role r on r.id = ur.rid
    </select>
</mapper>